import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';

interface User {
  id: string;
  name: string;
  email: string;
  role: 'admin' | 'agent' | 'customer' | 'accountant';
}

interface AuthContextType {
  user: User | null;
  login: (email: string, password: string) => Promise<void>;
  logout: () => void;
  register: (name: string, email: string, password: string, role?: string) => Promise<void>;
  isLoading: boolean;
  error: string | null;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    // Check for user in localStorage when the component mounts
    const storedUser = localStorage.getItem('skyways_user');
    if (storedUser) {
      setUser(JSON.parse(storedUser));
    }
    setIsLoading(false);
  }, []);

  const login = async (email: string, password: string) => {
    try {
      setIsLoading(true);
      setError(null);
      
      // In a real app, this would be an API call to authenticate the user
      // For demo purposes, we'll simulate a successful login with mock data
      
      if (email === 'admin@example.com' && password === 'password') {
        const userData: User = {
          id: '1',
          name: 'Admin User',
          email: 'admin@example.com',
          role: 'admin'
        };
        setUser(userData);
        localStorage.setItem('skyways_user', JSON.stringify(userData));
      } else if (email === 'agent@example.com' && password === 'password') {
        const userData: User = {
          id: '2',
          name: 'Travel Agent',
          email: 'agent@example.com',
          role: 'agent'
        };
        setUser(userData);
        localStorage.setItem('skyways_user', JSON.stringify(userData));
      } else if (email === 'customer@example.com' && password === 'password') {
        const userData: User = {
          id: '3',
          name: 'Customer',
          email: 'customer@example.com',
          role: 'customer'
        };
        setUser(userData);
        localStorage.setItem('skyways_user', JSON.stringify(userData));
      } else if (email === 'accountant@example.com' && password === 'password') {
        const userData: User = {
          id: '4',
          name: 'Accountant',
          email: 'accountant@example.com',
          role: 'accountant'
        };
        setUser(userData);
        localStorage.setItem('skyways_user', JSON.stringify(userData));
      } else {
        throw new Error('Invalid credentials');
      }
    } catch (error) {
      setError(error instanceof Error ? error.message : 'An unknown error occurred');
    } finally {
      setIsLoading(false);
    }
  };

  const register = async (name: string, email: string, password: string, role: string = 'customer') => {
    try {
      setIsLoading(true);
      setError(null);
      
      // In a real app, this would be an API call to register the user
      // For demo purposes, we'll simulate a successful registration with mock data
      
      const userData: User = {
        id: '5', // In a real app, this would be generated by the server
        name,
        email,
        role: 'customer' as 'admin' | 'agent' | 'customer' | 'accountant',
      };
      
      setUser(userData);
      localStorage.setItem('skyways_user', JSON.stringify(userData));
    } catch (error) {
      setError(error instanceof Error ? error.message : 'An unknown error occurred');
    } finally {
      setIsLoading(false);
    }
  };

  const logout = () => {
    setUser(null);
    localStorage.removeItem('skyways_user');
  };

  return (
    <AuthContext.Provider value={{ user, login, logout, register, isLoading, error }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};